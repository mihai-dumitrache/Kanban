@using Kanban.Models
@using Microsoft.AspNetCore.Http
@using Kanban.Services
@using Kanban.Services.Interfaces
@inject Kanban.Services.Interfaces.IUserServices _userService
@inject Kanban.Services.Interfaces.IBoardServices _boardService
@model Kanban.Models.Board

@*
    Forcontentleftn enabling MVCalign-contenty projecttopt https://go.microsoft.com/fwlink/?LinkID=397860
*@

<script src="https://kit.fontawesome.com/d5cb6dbe34.js" crossorigin="anonymous"></script>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Kanban</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" />
</head>

<script>
    function allowDrop(ev) {
      ev.preventDefault();
    }

    function drag(ev) {
      ev.dataTransfer.setData("text", ev.target.id);
    }

    function drop(ev) {
      ev.preventDefault();
      var data = ev.dataTransfer.getData("text");
      ev.target.appendChild(document.getElementById(data));
    }
</script>

<h1>@ViewData["Board"]</h1>

<b>Board Name</b>: @Html.DisplayFor(model => model.Title)
<br />
<b>Board Description</b>: @Html.DisplayFor(model => model.Description)
<br />
<b>Board Status</b>: @Html.DisplayFor(model => model.ProjectStatus)
<br />
<b>Board Creator</b>: @Html.DisplayFor(model => model.CreatedByUser.Name)
<br />
@Html.HiddenFor(model => model.Id, new{id="boardId"})
@Html.HiddenFor(model => model.UserBoards)

<div id="element1">
    <label style="top:23%;left:18%;display:inline-block;">Only my tasks&nbsp;
        @*<div id="element2" class="child">*@
        <input type="checkbox" class="form-check-input" style="display:inline-block;margin-left:auto;vertical-align:middle;" id="myTasks" name="myTasks" value="true" onclick="validate()" >
        @*</div>*@
    </label>
</div>






<select id="ExportType" style="position:absolute;top:11.6%;left:50%;">
    <option value="" selected disabled hidden>Choose report type</option>
    <option value="MyTasks">My Tasks from this Board</option>
    <option value="AllTasks">All Tasks from this Board</option>
</select>
<br />
<button type="button" class="font-family" onclick="generateReport()" style="font-family:Verdana;background-color: #efefef;font-size:105%;height:2.8%;position:absolute;top:11.5%;left:65%;right:0%;padding:0%;text-align:center;border-radius:4%;width:10%;"><i class="far fa-plus-square"><i style="font-family:sans-serif;font-style:normal"> Export My Tasks </i></i></button>

<div class="has-error">
    @Html.ValidationMessage("NoChosenOption")
</div>

<div id="allTasks" class="row" style="display:flex">

    @foreach (var statusType in Model.BoardTaskStatuses)
    {

        <div class="col" style="border: thin solid black;display:table-group-column">
            @Html.DisplayFor(model => statusType.Status.StatusName) @*</div>*@

            @foreach (var item in Model.TasksList)
            {
                @if (item.Status.Id == statusType.Status.Id)
                {

                    <div class="row" style="border: thin solid black;display:table-group-row">
                        <div class="col" style="display:table-column" ondrop="drop(event)" ondragover="allowDrop(event)" draggable="true" ondragstart="drag(event)">
                            @Html.DisplayFor(modelitem => item.Title)<br />
                            <p>• @Html.DisplayFor(modelitem => item.Description)</p>
                            @if (item.Responsible!=null && String.IsNullOrEmpty(item.Responsible.Name) == false)
                            {
                                <p>• Responsible: @Html.DisplayFor(modelitem => item.Responsible.Name)</p> 
                                                                                             
                            }
                            else
                            {
                                <p>• Responsible: &lt;not set&gt;</p>
                            }
                            
                            @*<p>• Responsible: @Html.DisplayFor(modelitem => item.Responsible.Name)</p>*@
                            <i class="fas fa-info-circle" title="View Details" onclick="location.href='@Url.Action("ViewTask","Task",new {id=item.Id})'"></i>
                        </div>
                    </div>

                }
            }
        </div>

    }
</div>


<div id="OwnTasksPartialView">
</div>

<br />
<button type="submit" class="btn btn-default add-button" onclick="location.href='@Url.Action("Index","Task",new {id=Model.Id})'">Add Task</button>

@{
    var objectTest = new Kanban.Services.UserBoardServices(_userService, _boardService);
}

@if (objectTest.CheckIfAdmin(@Context.Session.GetString("_Email"), @Model.Id) == true)

{
    <form asp-controller="User" asp-action="AddUserToBoard" method="post">
        <div class="form-group">
            <label name="userEmail" class="control-label">Add user to board</label>
            <input name="userEmail" class="form-control" type="email" placeholder="Insert User Email" id="userEmail" />
        </div>
        <button type="submit" class="btn btn-default" style="background-color:#f0e68c">Add user</button>
        @Html.HiddenFor(model => model.Id)
        <div class="has-error">
            @Html.ValidationMessage("UserNotFound")
            @Html.ValidationMessage("UserHasAccess")
        </div>
        
    </form>
}
else
{ }



@*<script src="~/Scripts/jquery-1.10.2.min.js"></script>
*@
@*<script type="text/javascript"></script>*@

<script>
    function generateReport(){
        var reportType = document.getElementById("ExportType").value;
        var boardId=@Model.Id;
            jQuery.ajax({
                url: '@Url.Action("TasksExport", "Task")',
                type: "Get",
                xhrFields: {
                    responseType: 'blob'},
                data: {boardId:boardId,reportType: reportType},
                success: function (data) {
                    var a = document.createElement('a');
                    var url = window.URL.createObjectURL(data);
                    a.href = url;
                    a.download = 'Report.xlsx';
                    document.body.append(a);
                    a.click();
                    a.remove();
                    window.URL.revokeObjectURL(url);
                },
                failure: function (errMsg) {
                alert(errMsg);
                }
            });
    }
</script>

<script>
    debugger;
    function validate(){
        var remember = document.getElementById("myTasks");
    $(remember).on('change', function () {
        debugger;
        if (remember.checked)
        {


            //loading partial view
            var id=@Model.Id;
            document.getElementById("allTasks").style.display="none";
            document.getElementById("OwnTasksPartialView").style.display="block"
            jQuery.ajax({
                url: '@Url.Action("ViewBoardWithLoggedUserTasks", "Board")',
                type: "Get",
                data: {id: id},
                success: function (data) {
                    $("#OwnTasksPartialView").html(data);
                },
                failure: function (errMsg) {
                alert(errMsg);
                }
            });
        }
        else
        {
            debugger;
            var id=@Model.Id;
            document.getElementById("allTasks").style.display="flex"
            document.getElementById("OwnTasksPartialView").style.display="none"
            //window.location='@Url.Action("ViewBoard", "Board")';
            jQuery.ajax({
                url: '@Url.Action("ViewBoard", "Board")',
                type: "Get",
                data: {id: id},
                success: function (data) {
                debugger;
                },

                failure: function (errMsg) {
                alert(errMsg);
                }
            });
        }
    });
    }

</script>